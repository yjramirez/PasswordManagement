@page "/"
@page "/password"

@using System.Net.Http.Json
@using PasswordManagement.Client.Data
@using Microsoft.Extensions.Configuration;

@inject HttpClient HttpClient
@inject IJSRuntime JSRuntime
@inject IConfiguration Configuration

<div>
    <button class="btn-primary ml-auto" @onclick="@(() => ShowPasswordCardDialog(new PasswordCard()))">Add New Password</button>
</div>

<hr />

<div class="input-group mb-3">
    <input type="text" @bind="SearchName" class="form-control" placeholder="Name..." aria-label="Search by name" aria-describedby="button-search">
    <div class="input-group-append">
        <button class="btn btn-outline-secondary" id="button-search" @onclick="@(() => GetPasswordCards())">Search</button>
    </div>
</div>

<div>
    <ul class="password-cards">
        @if (passwordCards != null)
        {
            @foreach (var item in passwordCards)
            {
                <li @onclick="@(() => ShowPasswordCardDialog(item))">
                    <div class="password-info">
                        <span class="title">@item.Name</span>
                        @item.Url
                    </div>
                </li>
            }
        }
    </ul>
</div>

@if (showingPasswordCardDialog)
{
    <PasswordCardDialog PasswordCard="passwordCardDialog"
                        OnCancel="CancelPasswordCardDialog"
                        OnSave="SavePasswordCardDialog" />
}


@code {
    List<PasswordCard> passwordCards;
    public string SearchName { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await GetPasswordCards();
    }

    async Task GetPasswordCards()
    {
        passwordCards = await HttpClient.GetFromJsonAsync<List<PasswordCard>>(string.Format(Configuration["ApiPasswordManagement"]+"?name={0}", SearchName));
    }

    bool showingPasswordCardDialog;
    PasswordCard passwordCardDialog;
    void ShowPasswordCardDialog(PasswordCard passwordCard)
    {
        passwordCardDialog = new PasswordCard()
        {
            Id = passwordCard.Id,
            Name = passwordCard.Name,
            Url = passwordCard.Url,
            UserName = passwordCard.UserName,
            Password = passwordCard.Password
        };

        showingPasswordCardDialog = true;
    }

    void CancelPasswordCardDialog()
    {
        CleanPasswordCardDialog();
    }

    void CleanPasswordCardDialog()
    {
        passwordCardDialog = null;
        showingPasswordCardDialog = false;
    }

    async Task SavePasswordCardDialog()
    {
        if (passwordCardDialog.Id > 0)
        {
            var response = await HttpClient.PutAsJsonAsync<PasswordCard>(Configuration["ApiPasswordManagement"], passwordCardDialog);
            response.EnsureSuccessStatusCode();
        }
        else
        {
            var response = await HttpClient.PostAsJsonAsync<PasswordCard>(Configuration["ApiPasswordManagement"], passwordCardDialog);
            response.EnsureSuccessStatusCode();
        }

        CleanPasswordCardDialog();

        await GetPasswordCards();
    }
}
